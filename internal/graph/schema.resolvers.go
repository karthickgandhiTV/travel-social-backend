package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	"github.com/karthickgandhiTV/travel-social-backend/internal/auth"
	"github.com/karthickgandhiTV/travel-social-backend/internal/graph/generated"
	"github.com/karthickgandhiTV/travel-social-backend/internal/graph/models"
)

// UpdateProfile updates the user's profile
func (r *mutationResolver) UpdateProfile(ctx context.Context, input models.UpdateProfileInput) (*models.User, error) {
	userID, err := auth.RequireAuth(ctx)
	if err != nil {
		return nil, err
	}

	return r.UserService.UpdateProfile(ctx, userID, input)
}

// UpdateTravelPreferences updates the user's travel preferences
func (r *mutationResolver) UpdateTravelPreferences(ctx context.Context, input models.UpdateTravelPreferencesInput) (*models.TravelPreferences, error) {
	userID, err := auth.RequireAuth(ctx)
	if err != nil {
		return nil, err
	}

	return r.UserService.UpdateTravelPreferences(ctx, userID, input)
}

// Me returns the currently authenticated user
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	userID, err := auth.RequireAuth(ctx)
	if err != nil {
		return nil, err
	}

	return r.UserService.GetUserByID(ctx, userID)
}

// User returns a user by ID
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	// Check authentication
	_, err := auth.RequireAuth(ctx)
	if err != nil {
		return nil, err
	}

	return r.UserService.GetUserByID(ctx, id)
}

// SearchUsers searches for users based on the provided query
func (r *queryResolver) SearchUsers(ctx context.Context, query string) ([]*models.User, error) {
	// Check authentication
	_, err := auth.RequireAuth(ctx)
	if err != nil {
		return nil, err
	}

	return r.UserService.SearchUsers(ctx, query)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
